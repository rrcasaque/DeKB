/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace KnowledgeBaseContributor {
  export type ContributionStruct = {
    contributorAddress: AddressLike;
    timestamp: BigNumberish;
    contributionURL: string;
    tags: string[];
  };

  export type ContributionStructOutput = [
    contributorAddress: string,
    timestamp: bigint,
    contributionURL: string,
    tags: string[]
  ] & {
    contributorAddress: string;
    timestamp: bigint;
    contributionURL: string;
    tags: string[];
  };
}

export interface KnowledgeBaseContributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addContribution"
      | "addContribution(string,string[])"
      | "contributions"
      | "contributions(uint256)"
      | "contributorContributions"
      | "contributorContributions(address,uint256)"
      | "getAllContributions"
      | "getAllContributions()"
      | "getContribution"
      | "getContribution(uint256)"
      | "getContributionsByContributor"
      | "getContributionsByContributor(address)"
      | "getTotalContributions"
      | "getTotalContributions()"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContributionAdded"
      | "ContributionAdded(uint256,address,string)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addContribution",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addContribution(string,string[])",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributions(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorContributions",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorContributions(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContributions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContributions()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContribution(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributionsByContributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributionsByContributor(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalContributions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalContributions()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addContribution(string,string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributions(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorContributions(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContributions()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContribution(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributionsByContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributionsByContributor(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalContributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalContributions()",
    data: BytesLike
  ): Result;
}

export namespace ContributionAddedEvent {
  export type InputTuple = [
    contributionId: BigNumberish,
    contributor: AddressLike,
    contributionURL: string
  ];
  export type OutputTuple = [
    contributionId: bigint,
    contributor: string,
    contributionURL: string
  ];
  export interface OutputObject {
    contributionId: bigint;
    contributor: string;
    contributionURL: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KnowledgeBaseContributor extends BaseContract {
  connect(runner?: ContractRunner | null): KnowledgeBaseContributor;
  waitForDeployment(): Promise<this>;

  interface: KnowledgeBaseContributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addContribution: TypedContractMethod<
    [_contributionURL: string, _tags: string[]],
    [bigint],
    "nonpayable"
  >;

  "addContribution(string,string[])": TypedContractMethod<
    [_contributionURL: string, _tags: string[]],
    [bigint],
    "nonpayable"
  >;

  contributions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string] & {
        contributorAddress: string;
        timestamp: bigint;
        contributionURL: string;
      }
    ],
    "view"
  >;

  "contributions(uint256)": TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string] & {
        contributorAddress: string;
        timestamp: bigint;
        contributionURL: string;
      }
    ],
    "view"
  >;

  contributorContributions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  "contributorContributions(address,uint256)": TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getAllContributions: TypedContractMethod<
    [],
    [KnowledgeBaseContributor.ContributionStructOutput[]],
    "view"
  >;

  "getAllContributions()": TypedContractMethod<
    [],
    [KnowledgeBaseContributor.ContributionStructOutput[]],
    "view"
  >;

  getContribution: TypedContractMethod<
    [_contributionId: BigNumberish],
    [
      [string, bigint, string, string[]] & {
        contributorAddress: string;
        timestamp: bigint;
        contributionURL: string;
        tags: string[];
      }
    ],
    "view"
  >;

  "getContribution(uint256)": TypedContractMethod<
    [_contributionId: BigNumberish],
    [
      [string, bigint, string, string[]] & {
        contributorAddress: string;
        timestamp: bigint;
        contributionURL: string;
        tags: string[];
      }
    ],
    "view"
  >;

  getContributionsByContributor: TypedContractMethod<
    [_contributor: AddressLike],
    [bigint[]],
    "view"
  >;

  "getContributionsByContributor(address)": TypedContractMethod<
    [_contributor: AddressLike],
    [bigint[]],
    "view"
  >;

  getTotalContributions: TypedContractMethod<[], [bigint], "view">;

  "getTotalContributions()": TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addContribution"
  ): TypedContractMethod<
    [_contributionURL: string, _tags: string[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addContribution(string,string[])"
  ): TypedContractMethod<
    [_contributionURL: string, _tags: string[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contributions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string] & {
        contributorAddress: string;
        timestamp: bigint;
        contributionURL: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributions(uint256)"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string] & {
        contributorAddress: string;
        timestamp: bigint;
        contributionURL: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributorContributions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "contributorContributions(address,uint256)"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllContributions"
  ): TypedContractMethod<
    [],
    [KnowledgeBaseContributor.ContributionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllContributions()"
  ): TypedContractMethod<
    [],
    [KnowledgeBaseContributor.ContributionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContribution"
  ): TypedContractMethod<
    [_contributionId: BigNumberish],
    [
      [string, bigint, string, string[]] & {
        contributorAddress: string;
        timestamp: bigint;
        contributionURL: string;
        tags: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContribution(uint256)"
  ): TypedContractMethod<
    [_contributionId: BigNumberish],
    [
      [string, bigint, string, string[]] & {
        contributorAddress: string;
        timestamp: bigint;
        contributionURL: string;
        tags: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContributionsByContributor"
  ): TypedContractMethod<[_contributor: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getContributionsByContributor(address)"
  ): TypedContractMethod<[_contributor: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalContributions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalContributions()"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ContributionAdded"
  ): TypedContractEvent<
    ContributionAddedEvent.InputTuple,
    ContributionAddedEvent.OutputTuple,
    ContributionAddedEvent.OutputObject
  >;
  getEvent(
    key: "ContributionAdded(uint256,address,string)"
  ): TypedContractEvent<
    ContributionAdded_uint256_address_string_Event.InputTuple,
    ContributionAdded_uint256_address_string_Event.OutputTuple,
    ContributionAdded_uint256_address_string_Event.OutputObject
  >;

  filters: {
    "ContributionAdded(uint256,address,string)": TypedContractEvent<
      ContributionAddedEvent.InputTuple,
      ContributionAddedEvent.OutputTuple,
      ContributionAddedEvent.OutputObject
    >;
    ContributionAdded: TypedContractEvent<
      ContributionAddedEvent.InputTuple,
      ContributionAddedEvent.OutputTuple,
      ContributionAddedEvent.OutputObject
    >;
  };
}
